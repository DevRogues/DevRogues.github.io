---
title: (TIL) 2024-12-19
date: 2024-12-19 00:00:00
categories: [캠프, TIL (Today I Learned)]
tags:
  [
    캠프
  ]
---

### 트러블 슈팅 1
---

1. **발단**  
  - 스테이지 변경 시 서버에서 검증하는 과정 중 Invalud elapsed Time 부분이 자주 걸리는 것이 확인되었다.
        ![alt text](../../../../assets/img/til/2412191.png)

2. **분석**  
  - 해당 검증하는 부분에 console.log를 추가하여 값들이 어떻게 나오는지 확인해 보았다.  
        ```javascript
        // 5-1. 기본 유효시간 계산
        const serverTime = Date.now(); // 현재 타임스탬프
        //유효시간 = 경과 시간(현재시간-현재 스테이지 진입시간) * 현재 스테이지의 초당 획득 점수
        // const elapsedTime = (serverTime - currentStage.timestamp) / 1000;
        //유효점수 = 유효시간 * 초당 점수
        const elapsedScore = ((serverTime - currentStage.timestamp) / 1000) * stages.data[currentStages.length - 1].scorePerSecond;

        // 5-2. 현재 스테이지에서 얻은 아이템의 총 점수 계산
        let sumItemScore = 0;
        const userItems = getItem(userId);
        if (userItems.length > 0) {
          userItems.forEach((item) => {
            if (item.stageId === payload.currentStage) {
              sumItemScore += item.score;
            }
          });
        }

        // 5-3. 오차시간 적용하여 유효시간 검증
        //TargetScore : 현재점수 - 이전 스테이지 점수 - 현재 스테이지에서 획득한 아이템 총 점수
        const targetScore = payload.score - stages.data[currentStages.length - 1].score - sumItemScore;
        console.log(
          ' elapsedScore : ',
          elapsedScore,
          ' targetScore : ',
          targetScore,
          ' serverTime : ',
          serverTime,
          ' timeStamp : ',
          payload.timestamp,
          ' currentStage.timestamp : ',
          currentStage.timestamp,
          ' payloadScore : ',
          payload.score,
          ' stages.data[currentStages.length - 1].score : ',
          stages.data[currentStages.length - 1].score,
        );
        if (elapsedScore < targetScore || elapsedScore > targetScore + SCORE_TOLERANCE) {
          return { status: 'fail', message: `Invalud elapsed Time : ${elapsedScore}` };
        }
        ```  
        ![alt text](../../../../assets/img/til/2412192.png)  
  - 클라이언트에서 점수 갱신하는 부분에서도 순서를 바꿔서 테스트를 해보았다.
        ```javascript
        update(deltaTime, currentStageData, targetStageData) {
          this.stageChange = false;
          this.second += deltaTime * 0.001;

          //1초가 지날때마다 점수 변경
          if (this.second >= 1) {
            this.second = 0; //초기화
            this.score += currentStageData.scorePerSecond; //점수 획득
          }
          /***
          * 다음 스테이지 데이터가 있고 현재 점수가 다음 스테이지의 진입 점수 이상이면 스테이지 변경
          */
          if (targetStageData && this.score >= targetStageData.score) {
            this.stageChange = true;
            sendEvent(11, { currentStage: currentStageData.id, targetStage: targetStageData.id, score: this.score });
          }

          return this.stageChange;
        }

        update(deltaTime, currentStageData, targetStageData) {
          this.stageChange = false;
          
          /***
          * 다음 스테이지 데이터가 있고 현재 점수가 다음 스테이지의 진입 점수 이상이면 스테이지 변경
          */
          if (targetStageData && this.score >= targetStageData.score) {
            this.stageChange = true;
            sendEvent(11, { currentStage: currentStageData.id, targetStage: targetStageData.id, score: this.score });
          }

          this.second += deltaTime * 0.001;

          //1초가 지날때마다 점수 변경
          if (this.second >= 1) {
            this.second = 0; //초기화
            this.score += currentStageData.scorePerSecond; //점수 획득
          }
          
          return this.stageChange;
        }
        ```  

3. **결과**
  - 결과를 말하자면 오차범위 검증하는 부분에서 최소값도 오차범위를 적용하는 방법 말고는 해결책을 찾지 못하였다. 게임 스타트와 동시에 모바일에 타이머를 같이 실행하여 테스트를 해봤을때는 정상적인 초에 통신이 되고있는 것이 확인되었다. 하지만 서버 로직상으로는 5초 미만으로 계속 찍힌다. 강의 초기에 알려준 스켈레톤 코드를 적용해서 테스트를 해보아도 똑같은 결과여서 로직에 문제는 아닌 것 같고 뭔가 내부적으로 타이머를 읽고 쓰는 타이밍이 서로 다른게 물려서 그런게 아닌가 의심을 해보고 있다.
      