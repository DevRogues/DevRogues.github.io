---
title: (TIL) 2024-12-10
date: 2024-12-10 00:00:00
categories: [캠프, TIL (Today I Learned)]
tags:
  [
    캠프
  ]
---

####  **게임 개발 단계**
---
기획단계 > 개발 단계 > 라이브 로 진행된다.

#### **기획 단계**  

1. Prject Director(PD) 
  - 한 팀의 헤드 역할. 게임 전반의 방향성을 결정
  - 게임 시나리오, 장르, 방향성을 기획
2. Technical Director(TD)
  - 서버팀,클라이언트팀 등 모든 기술팀의 헤드 역할. 전체적인 기술적 방향성을 결정
  - 게임 방향성에 대한 프로토타입을 제작
3. Art Director(AD)
  - 아트팀 모든 방향성을 결정
  - 게임 방향성에 맞는 아트 컨셉을 결정

#### **개발단계(서버 팀)**  

1. 초기
  - 인프라 구성 : 대규모 트래픽처리, 업데이트 방식, 서버관리 및 모니터링 툴, NAS 내부망 클라우드 세팅
  - 서버 로직 개발 : 오픈 컨텐츠, 더미 및 부하 테스트, 내부 및 외부 QA대응
2. 라이브
  - 이슈대응, 추가 컨텐츠 개발

#### **게임 서버가 주로 하는 일** 

- **검증** : 개발자의 관점  
예) 포션 아이템 존재 여부 , 실제로 체력이 회복 되는가?  
- **검정** : 사용자의 관점  
예) 포션 아이템이 실제로 HP를 회복 시키는지 확인  


#### HTTP 와 TCP
---
HTTP는 TCP(HTTP/1.1) 든 UDP(HTTP/3) 든 둘 중 하나의 연결을 통해서 동작하게 됩니다

#### HTTP 특징

- Request <-> Response 구조 
    (비연결성=>리소스가 적다 => 처리가 빠르다)  
- Satleless(무상태)
    이전 요청 기록을 기록하지 않음  
- http 메세지 구조
    header와 body  

HTTP는 비연결성이지만 TCP는 연결지향성이다.

#### TCP
---

#### 3-way-hanshake

#### 양방향 통신(Full-Duplex) 순서
1. 서버는 접속 요청을 받기 위한 소켓을 연다. → **Listen**
2. 클라이언트는 소켓을 만들고, 서버에 접속을 요청한다. → **Connect**
3. 서버는 접속 요청을 받아서 클라이언트와 통신할 소켓을 따로 만든다. → **Accept**
4. 소켓을 통해 서로 데이터를 주고 받는다. → **Send & Receive ⇒ 반복!**
5. 통신을 마치면 소켓을 닫는다. → **Close ⇒ 상대방은 Receive로 인지할 수 있다.**

#### 웹소켓
--- 
양방향 통신

#### 특징
1. 실시간 통신
2. 양방향 통신
3. 지속적 연결
4. 낮은 오버헤드
5. HTTP와 호환성 : HTTP를 통해서 작동을 함