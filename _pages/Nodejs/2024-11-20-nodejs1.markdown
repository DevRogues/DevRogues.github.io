---
title: Node.js
date: 2024-11-20 00:00:00
categories: [Node.js, Node]
tags:
  [
    Node.js
  ]
---

# **Node.js**
---
Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임. Javascript를 브라우저가 아닌 컴퓨터에서 브라우저 없이 실행하게 도와주는 환경.

#### **장점**
---
1. **논 블로킹(Non-blocking) I/O**
  - 시스템 호출이 완료되기를 기다리지 않고 바로 다음 작업으로 즉시 넘어갈 수 있는 방식. 완료 여부와 상관없이 즉시 제어권을 호출한 함수에게 반환.
    - **블로킹(Blocking) I/O** : 한 번에 하나의 작업만을 처리. 제어권을 넘겨주지 않는다.
2. **싱글 스레드(Single Thread)**
  - 스레드 하나를 사용하는 것이며, 동시에 하나의 작업만을 처리할 수 있음.
    - **스레드(Thread)** : 프로그램이 동작할 때 CPU 또는 프로세서를 사용하는 단위.
3. **이벤트 루프(Event Loop)**
![이벤트 루프](https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8d06198c-fa60-4e13-aa89-c6a7171401d0%2F1520136407543.jpeg?table=block&id=59d8187f-f687-40d8-9527-00f80d784c56&spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&width=1200&userId=&cache=v2)
  - 여러 이벤트들과 같은 비동기 작업들을 모아서 관리하고, 어떤 순서대로 실행해야하는지 도와주는 도구.   

    ```javascript
    //이벤트 루프의 동작 방식 이해  
    function firstFunction() {
      console.log('firstFunction 입니다.');
      secondFunction();
    }

    function secondFunction() {
      // 2 초간 기다린다.
      setTimeout(function () {
        console.log('secondFunction 입니다.');
      }, 2000);
    }

    firstFunction();
    console.log('전역 코드 실행 중!');

    // print: firstFunction 입니다.
    // print: 전역 코드 실행 중!
    /** 2 초간 기다린다. **/
    // print: secondFunction 입니다.
    ```

4. **호출 스택(Call Stack)**
![호출 스택](https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc0af91da-5c36-4389-9a06-7d8c92e9f7ac%2Fjs-event-loop-explained.png?table=block&id=302cca8a-87be-4174-a71e-fa74bb21ebb3&spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&width=1360&userId=&cache=v2)
  - 함수의 실행 순서를 추적하는 자료구조입니다.
  - JavaScript는 코드를 실행하면서 호출 스택(Call Stack)에 함수를 추가(push)하고 함수가 완료되면 호출 스택에서 제거(pop)
  - **이벤트 루프(Event Loop)**와 **이벤트 큐 (Event Queue)**를 사용

#### **Package**
---
Node.js에서 코드의 재사용성을 높이기 위해 작성된 독립적인 코드 조각을 “모듈”이라고 하며 다른 개발자들과 공유 할 때 이를 **패키지(package)**라고 한다.

#### **Package Manager**
---
패키지를 손쉽게 다루는 작업을 안전하고 편리하게 사용하기 위한 툴.  
Node.js에서 대표적으로 사용하는 패키지 매니저는 **npm**과 **yarn**이 존재.

1. npm
 - Node.js의 가장 대표적인 패키지 매니저. Node.js를 사용하는데 필요한 패키지를 설치해주는 프로그램(Node.js를 설치할 때 함께 설치).
2. yarn
  - npm의 대체제로 Facebook이 2016년에 출시.
  - yarn은 병렬 처리를 도입하여, 패키지 설치 속도가 npm보다 빠르다는 장점이 존재.

    ```bash
    # npm을 이용하여 전역 환경에 Yarn을 설치합니다!
    npm install -g yarn

    # 새로운 프로젝트나 패키지를 만들 때 사용 (package.json 파일 생성)
    yarn init 

    # 패키지 설치
    yarn add [패키지명]
    yarn add [패키지명] [패키지명]
    ```

3. package.json
  - Node.js 프로젝트의 가장 핵심적인 파일이며, 프로젝트에 대한 정보와 설치한 패키지들의 버전을 관리할 때 사용하는 파일.
4. package-lock.json과 yarn.lock
  - package.json에서 정의한 패키지 외에도 node_modules에 들어있는 패키지들의 버전과 의존 관계가 상세하게 정의.
  - 개발 환경 간에 일관된 패키지 버전을 보장해주므로, 버전 관리에 매우 중요한 역할을 합니다. 다른 개발자가 같은 프로젝트를 클론(Clone)하거나 복제했을 때, 동일한 의존성을 유지.
