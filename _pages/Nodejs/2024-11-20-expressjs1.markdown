---
title: Express.js
date: 2024-11-20 00:00:00
categories: [Node.js, Express.js]
tags:
  [
    Node.js,Express.js
  ]
---

# **Express.js**
---
Node.js로 서버를 빠르고 간편하게 만들 수 있게 도와주는 가장 대표적인 웹 프레임워크.
  - 웹 프레임워크(Web Framework) : 웹 서비스를 빠르게 구현할 수 있게 도와주는 도구(틀)

#### **특징**
---
1. 미들웨어(Middleware)를 지원
  - 인증(Authentication), 로깅(Logging), 에러 처리 핸들러(Exception Handler)
  - 미들웨어(Middleware) : 서버에서 요청을 받을때 가끔 모든 요청에 대해 공통적인 처리를 하고싶은 경우가 생길 수 있습니다. 그럴때 미들웨어를 이용하여 서버의 요청/응답에 대해 공통적으로 관리가 가능
2. Rest API를 편리하게 구현 가능하다.

#### **설치 및 사용**
---

1. 설치

    ```bash
    # package-json 설치
    npm init -y

    # express.json 설치(npm)
    npm install --save express 

    # express.json 설치(yarn)
    yarn express
    ```

2. package-json에 확인  

    ```javascript
    // package-json
      "dependencies": {
        "express": "^4.16.4"
      }
    ```

3. app.js  

    ```javascript
    // app.js

    import express from 'express';

    const app = express();
    const PORT = 3000;

    app.get('/', (req, res) => {
      res.send('Hello World!');
    });

    app.listen(PORT, () => {
      console.log(PORT, '포트로 서버가 열렸어요!');
    });
    ```

#### **Routing**
---
Routing은 클라이언트의 요청 조건(Http 메서드, 주소 등)에 대응해 응답(Response)하는 방식

Router 구조  

  ```javascript
  router.METHOD(PATH, HANDLER);
  ```

  - `router`: Express.js의 라우터를 정의하기 위해 사용합니다.
  - `METHOD`: HTTP Method를 나타냅니다. (ex: `get`, `post`, `put`, `patch`, `delete` …)
  - `PATH`: 실제 서버에서 API를 사용하기 위한 경로를 나타냅니다. (ex: `users`, `posts` …)
  - `HANDLER`: 라우트가 일치할 때 실행되는 함수힙니다.

  ```javascript
  /*************
   * // routes/goods.js 
   */
  import express from 'express';

  // Express.js의 라우터를 생성합니다.
  const router = express.Router();

  // localhost:3000/api/ GET
  router.get('/', (req, res) => {
    res.json('default url for goods.js GET Method');
  });

  // localhost:3000/api/about GET
  router.get('/about', (req, res) => {
    res.json('goods.js about PATH');
  });

  //다른 곳에서 사용하기 위해 내보내주는 코드를 추가
  export default router; 
  ```

  ```javascript
  /*************
   * // app.js
   */

  import goodsRouter from './routes/goods.js';

  // localhost:3000/api -> goodsRouter
  app.use('/api', [goodsRouter]);
  ```

#### **Express.js 통신 흐름**
---
1. **클라이언트**는 **특정 URL**과 **데이터**를 담은 **요청(Request)**을 **서버**에 전송합니다.
2. **서버**는 받은 데이터에 따라 필요한 **비즈니스 로직을 수행**합니다.
3. **서버**는 처리된 결과를 **클라이언트**에게 **응답(Response)**으로 보내줍니다.

#### **req, res 객체**
---
1. **req 객체**
  - req.app : req 객체를 통해 Express.js의 `app` 객체에 접근할 수 있습니다.
  - req.ip: 요청한 Client의 ip 주소가 담겨 있습니다.
  - **req.body**: Request를 호출할 때 `body`로 전달된 정보가 담긴 객체입니다.
      - `express.json()` Middleware를 이용하여야 해당 객체를 사용할 수 있습니다.
  - **req.params**: **라우터 매개 변수(Path Params)**에 대한 정보가 담긴 객체입니다.
  - **req.query**: Request를 호출할 때 **쿼리 스트링**으로 전달된 정보가 담긴 객체입니다.
  - req.cookies: Request를 호출할 때 Cookie 정보가 담긴 객체입니다.
      - `cookie-parser` Middleware를 이용하여야 해당 객체를 사용할 수 있습니다.
  - req.get(*Header*): 헤더에 저장된 값을 가져오고 싶을 때 사용합니다.

2. **res 객체**
  - res.app : res 객체를 통해 Express.js의 `app` 객체에 접근할 수 있습니다.
  - **res.status(*코드*)** : Response에 **HTTP 상태 코드**를 지정합니다.  
      → [Http 상태 코드에 대해 자세히 알고싶다면 여기를 클릭해주세요!](https://developer.mozilla.org/ko/docs/Web/HTTP/Status)
  - **res.send(*데이터*)** : 데이터를 포함하여 Response를 전달합니다.
      - ex) `res.send('Hello, World');`
  - **res.json(*JSON*)** : JSON 형식으로 Response를 전달합니다.
      - ex) `res.json({ message: 'Hello, World' });`
  - res.end() : 데이터 없이 Response를 전달합니다.
  - res.redirect(*주소*) : 리다이렉트할 주소와 함께 Response를 전달합니다.
      - ex) `res.redirect('https://naver.com');`
  - res.cookie(*Key, Value, Option*) : 쿠키를 설정할 때 사용합니다.
  - res.clearCookie(*Key, Value, Option*) : 쿠키를 제거할 때 사용합니다.

#### **HTTP Method**
----
Get, Post, Patch, Delete

```javascript
import express from 'express';

// Express.js의 라우터를 생성합니다.
const router = express.Router();

// localhost:3000/api GET
router.get('/api', (req, res) => {
  return res.status(200).json({});
});

// localhost:3000/api POST
router.post('/api', async (req, res) => {
  // 클라이언트에게 전달받은 value 데이터를 변수에 저장합니다.
  const { value } = req.body;

  return res.status(201).json({ todo });
});

// localhost:3000/api/:userId PATCH
router.patch('/api/:userId', async (req, res) => {
  // :userId 의 값을 가져옵니다.
  const { userId } = req.params;
  // body 값 가져오기
  const { body } = req.body;

  return res.status(200).json({});
});

// localhost:3000/api/:userId DELETE
router.delete('/api/:userId', async (req, res) => {
  // :userId 의 값을 가져옵니다.
  const { userId } = req.params;

  return res.status(200).json({});
});
```

#### **미들웨어** 
---
미들웨어(Middleware)는 서버의 요청(Request)-응답(Response) 과정에서 중간에 위치하여 특정 기능을 수행하는 함수.

1. Express.js에서 미들웨어 작성
  ```javascript
  app.use((req, res, next) => {
    // Request 로그 남기는 미들웨어 작성
    console.log('Request URL:', req.originalUrl, ' - ', new Date());
    next();
  });
  ```
  - req: **요청(Request)**에 대한 정보가 담겨있는 객체입니다.
      - HTTP Headers, Query Parameters, URL 등 **브라우저가 서버로 보내는 정보**들이 담겨있습니다.
  - res: **응답(Response)**을 위한 기능이 제공됩니다.
      - 어떤 **HTTP Status Code**로 응답 할지, 어떤 **데이터 형식**으로 응답 할지, **헤더는 어떤 값을 넣어** 응답 할지 다양한 기능을 제공합니다.
  - next: 다음 스택으로 정의된 **미들웨어를 호출**합니다.

2. Express.js에서 미들웨어 흐름 
  ![next()](https://teamsparta.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F37d79f84-576e-4657-b9f7-5afc5519788d%2FUntitled.png?table=block&id=007ecfaa-b338-4b09-91b5-a76249747baf&spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&width=1360&userId=&cache=v2)

    ```javascript
    app.use((req, res, next) => {
        console.log('첫번째 미들웨어');
        next();
    });

    app.use((req, res, next) => {
        console.log('두번째 미들웨어');
        next();
    });

    app.use((req, res, next) => {
        console.log('세번째 미들웨어');
        next();
    });

    // print: 첫번째 미들웨어
    // print: 두번째 미들웨어
    // print: 세번째 미들웨어
    ```

3. 에러 처리 미들웨어  
Experss.js에서는 미들웨어나 라우터에서 에러가 발생하면, 해당 에러를 next 함수를 통해 다음 미들웨어로 전달합니다. 그리고, Express.js는 등록된 미들웨어 중에서 에러를 매개변수로 받는 미들웨어(에러 처리 미들웨어)를 찾아 실행하게되는 것.

    ```javascript
    app.use((err, req, res, next) => {
      console.error(err.stack);
      res.status(500).send('Something broke!');
    });
    ```

    ```javascript
    // /middlewares/error-handler.middleware.js

    export default function (err, req, res, next) {
      console.error(err);

      // Joi 검증에서 에러가 발생하면, 클라이언트에게 에러 메시지를 전달합니다.
      if (err.name === 'ValidationError') {
        return res.status(400).json({ errorMessage: err.message });
      }

      // 그 외의 에러가 발생하면, 서버 에러로 처리합니다.
      return res
        .status(500)
        .json({ errorMessage: '서버에서 에러가 발생하였습니다.' });
    }
    ```

    미들웨어는 **등록된 순서대로 실행**됩니다. 비즈니스 로직을 수행한 후 발생한 에러는 **다음 미들웨어로 전달**된다.  
    이 때, 에러 처리 미들웨어가 라우터 이후에 등록되어 있으면, 에러를 잡아 처리할 수 있다. 반대로, **라우터 이전에 에러 처리 미들웨어를 등록**하면 라우터에서 발생한 에러를 처리할 수 없다.  
    따라서, **항상 에러 처리 미들웨어는 라우터 설정 코드 하단**에 위치해야 한다.

#### **Express Session** 
---

```bash
# express-session 미들웨어를 설치합니다.
yarn add express-session
```