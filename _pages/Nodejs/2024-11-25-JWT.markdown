---
title: JWT(Json Web Token)
date: 2024-11-25 00:00:00
categories: [Node.js, JWT]
tags:
  [
    Node.js, 라이브러리
  ]
---

# JWT(Json Web Token)
---
웹 표준으로써, 서버와 클라이언트 사이에서 정보를 안전하게 전송하기 위해 도움을 주는 웹 토큰(Web Token).
  - SON 형태의 데이터를 안전하게 전송하고 검증할 수 있는 기능을 제공합니다.
  - 인터넷 표준으로서 자리잡은 규격입니다.
  - 다양한 암호화 알고리즘을 사용할 수 있어, 신뢰성을 보장합니다.
  - `header**.**payload**.**signature` 의 형식으로 3가지의 데이터를 포함합니다. (개미처럼 머리, 가슴, 배)  
      → 때문에, JWT 형식으로 변환 된 데이터는 항상 2개의 `.` 이 포함된 데이터여야 합니다.

Header(머리): 헤더는 토큰의 타입과 어떤 암호화를 사용하여 생성된 데이터인지 정의되어 있습니다.

```json
{
  "alg": "HS256",
  "typ": "JWT"
}
​```

Payload(가슴): 페이로드는 실제 전달하려는 데이터를 담고 있습니다. 대표적으로 개발자가 원하는 데이터를 저장합니다.

```json
{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}
​```

Signature(배): 서명은 헤더와 페이로드, 그리고 비밀 키(Secret Key)를 이용하여 생성됩니다. 이 서명은 토큰이 변조되지 않은 정상적인 토큰인지 확인할 수 있게 도와줍니다.

```javascript
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
	secret
)
```

각 부분을 Base64로 인코딩하여, 점(.) 으로 연결하면 최종적으로 JWT를 생성하게 된다. 이렇게 생성된 JWT는 이전에 배운 쿠키(Cookie) 또는 Path Parameter를 통해 전달될 수 있다.

#### 특성
---
1. JWT는 **비밀 키**를 모르더라도 **복호화(Decode)**가 가능합니다.
    - **JWT를 가진 사람이라면 누구나** 해당 토큰에 어떤 데이터가 담겨있는지 확인할 수 있습니다.
    - 변조만 불가능 할 뿐, **누구나 복호화**하여 보는것은 가능하다는 의미가 됩니다!
2. **민감한 정보(개인정보, 비밀번호 등)**는 담지 않도록 해야합니다.
    - JWT의 페이로드는 **누구나 복호화하여 볼 수 있기** 때문입니다.
3. JavaScript와 같이 **특정 언어에서만 사용 가능한것은 아닙니다!**
    - JWT는 단순히 **데이터 형식**일 뿐, 단지 개념으로서 존재하고, 이 개념을 코드로 구현하여 공개된 코드를 우리가 사용하는게 일반적입니다.

#### 쿠키/세션과 차이
---
데이터를 교환하고 관리하는 방식인 쿠키/세션과 달리, JWT는 단순히 데이터를 표현하는 형식.
  - **JWT로 만든 데이터**는 **변조가 어렵고**, 서버에 별도의 상태 정보를 저장하지 않기 때문에, 서버를 **Stateless(무상태)**로 관리할 수 있습니다.
  - **쿠키와 세션**은 사용자의 로그인 정보나 세션 데이터를 **서버에 저장**하므로 상태를 유지합니다. 때문에, **Stateful(상태 보존)**하게 데이터가 관리됩니다.
  - **Stateless(무상태)**와 **Stateful(상태 보존)**의 차이를 간단히 설명하자면,
  Node.js 서버가 언제든 죽었다 살아나도 **똑같은 동작**을 하면 **Stateless**하다고 볼 수 있습니다.
  반대로 서버가 죽었다 살아났을때 조금이라도 **동작이 다른** 경우 **Stateful**하다고 볼 수 있겠죠.
  - 서버가 **스스로** 어떤 기억을 갖고 다른 결정을 하냐 마냐의 차이라고 보면 더 쉽습니다 😉
  - 로그인 정보를 **서버에 저장**하게 되면 무조건 **Stateful(상태 보존)**이라고 볼 수 있죠!

#### 설치
---

```bash
# jsonwebtoken, express 라이브러리를 설치합니다.
yarn add jsonwebtoken express
```

#### 사용법
---
1. 암호화

```javascript
import jwt from 'jsonwebtoken';

const token = jwt.sign({ myPayloadData: 1234 }, 'mysecretkey');
console.log(token);
```

2. 복호화

```javascript
import jwt from 'jsonwebtoken';

const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJteVBheWxvYWREYXRhIjoxMjM0LCJpYXQiOjE2OTA4NzM4ODV9.YUmYY9aef9HOO8f2d6Umh2gtWRXJjDkzjm5FPhsQEA0";
const decodedValue = jwt.decode(token);

console.log(decodedValue); 
```

3. 검증

```javascript
import jwt from 'jsonwebtoken';

const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJteVBheWxvYWREYXRhIjoxMjM0LCJpYXQiOjE2OTA4NzM4ODV9.YUmYY9aef9HOO8f2d6Umh2gtWRXJjDkzjm5FPhsQEA0";
const decodedValueByVerify = jwt.verify(token, "mysecretkey");

console.log(decodedValueByVerify);
```

Invalid Signature 에러 발생
![오류 발생](https://teamsparta.notion.site/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F83c75a39-3aba-4ba4-a792-7aefe4b07895%2F0c2b8749-8b4c-4676-bd02-417acb6c3cae%2F%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA_2023-08-01_%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE_4.18.05.png?table=block&id=671bcca6-9ccb-4d90-b185-c74443b60182&spaceId=83c75a39-3aba-4ba4-a792-7aefe4b07895&width=1300&userId=&cache=v2)